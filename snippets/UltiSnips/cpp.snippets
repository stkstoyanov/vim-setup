global !p
import vim

# Return the column index of the first non-whitespace character
def column_begin():
    line = int(vim.eval('line(".")'))
    s = vim.current.buffer[line-1]
    return len(s) - len(s.lstrip())

def make_line(twidth, comment):
    lwidth = int(vim.eval('&textwidth')) or 80
    lwidth -= column_begin() + 1
    swidth = (lwidth - twidth - len(comment)) // 2
    ewidth = lwidth - swidth - twidth - len(comment)
    sline = comment + '-'*swidth
    eline = '-'*ewidth
    return sline, eline
endglobal

snippet ih "include" b
#include "${1:header}"$0
endsnippet

snippet il "include" b
#include <${1:library}>$0
endsnippet

snippet cl  "C++ class definition" b
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
  $1();
  ~$1();
  $0
};
endsnippet

snippet clc  "C++ child class definition" b
class ${1:`!p snip.rv = snip.basename or "name"`} : public ${2:`!p snip.rv =
snip.basename or "name"`}
{
public:
  $1();
  ~$1();
  $0
};
endsnippet

snippet ns "namespace"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
$0
} // $1
endsnippet

snippet for "for loop" b
for (int ${1:i}=${2:0}; $1 != ${3:10}; ++$1)
{
  $0  
}
endsnippet

snippet wh "while loop" b
while ($1)
{
  $0
}
endsnippet

snippet if "if statement" b
if ($1)
{
  $0
}
endsnippet

snippet el "else statement" b
else
{
  $0
}
endsnippet

snippet m "C++ main function" b
int main()
{
  ${1:/* code */}
  return 0;
}
endsnippet

snippet mc "C main function" b
int main(int argc, char *argv[])
{
  ${1:/* code */}
  return 0;
}
endsnippet

snippet l "Insert a comment in a line style" b
`!p
line = make_line(len(t[1]) + 2, '//')
snip.rv = line[0]` ${1:Content} `!p
line = make_line(len(t[1]) + 2, '//')
snip.rv = line[1]`$0
endsnippet

snippet lb "Insert a comment in a line style" b
`!p
line = make_line(0, '//')
snip.rv = line[0] + line[1]`$0
endsnippet

snippet ds "Doxygen comment - single line" b
`!p
line = make_line(0, '//')
snip.rv = line[0] + line[1]`
//! \brief $0
`!p
line = make_line(0, '//')
snip.rv = line[0] + line[1]`
endsnippet

snippet dm "Doxygen comment - multiple lines" b
`!p
line = make_line(0, '//')
snip.rv = line[0] + line[1]`
/*!
 * \brief $0
 */
`!p
line = make_line(0, '//')
snip.rv = line[0] + line[1]`
endsnippet
